<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mistra</title>
  
  <subtitle>🍀羊羊的丑柑儿🍀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mistra.wang/"/>
  <updated>2019-05-05T02:29:26.111Z</updated>
  <id>http://mistra.wang/</id>
  
  <author>
    <name>王瑞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>同步、异步、阻塞、非阻塞</title>
    <link href="http://mistra.wang/2019/05/05/%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E3%80%81%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>http://mistra.wang/2019/05/05/同步、异步、阻塞、非阻塞/</id>
    <published>2019-05-05T02:23:15.000Z</published>
    <updated>2019-05-05T02:29:26.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系"><a href="#同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系" class="headerlink" title="同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系"></a>同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系</h3><ul><li>同步：执行一个操作后，必须等待返回结果，然后才继续执行后续的操作</li><li>异步：执行一个操作后，不必等待返回结果，可以去执行其他的操作，然后等待通知再回来执行刚才没执行完的操作(比如回调函数通知)</li></ul><h3 id="阻塞和非阻塞关注的是程序在等待调用结果时的状态-CPU层面-，单个进程的执行状态"><a href="#阻塞和非阻塞关注的是程序在等待调用结果时的状态-CPU层面-，单个进程的执行状态" class="headerlink" title="阻塞和非阻塞关注的是程序在等待调用结果时的状态(CPU层面)，单个进程的执行状态"></a>阻塞和非阻塞关注的是程序在等待调用结果时的状态(CPU层面)，单个进程的执行状态</h3><ul><li>阻塞调用是指调用结果返回之前当前线程都会挂起，进程给CPU传达一个任务之后，一直等待CPU处理完成，然后才执行后面的操作</li><li>非阻塞调用是指，当前调用无论是否马上返回，都不会阻塞当前线程，进程给CPU传达任务后，继续处理当前线程后续的操作，隔断时间再来询问之前的操作是否完成</li></ul><h3 id="异步就是异步，同步才有阻塞与非阻塞之分，异步必定是非阻塞的"><a href="#异步就是异步，同步才有阻塞与非阻塞之分，异步必定是非阻塞的" class="headerlink" title="异步就是异步，同步才有阻塞与非阻塞之分，异步必定是非阻塞的"></a>异步就是异步，同步才有阻塞与非阻塞之分，异步必定是非阻塞的</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系&quot;&gt;&lt;a href=&quot;#同步和异步关注的是消息通信机制，针对应用程序来，关注的是程序中间的协作关系&quot; class=&quot;headerlink&quot; title=&quot;同步和异步关注的是消息通信机制，针对
      
    
    </summary>
    
      <category term="IO/NIO" scheme="http://mistra.wang/categories/IO-NIO/"/>
    
    
      <category term="同步/异步" scheme="http://mistra.wang/tags/%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5/"/>
    
      <category term="阻塞/非阻塞" scheme="http://mistra.wang/tags/%E9%98%BB%E5%A1%9E-%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    
  </entry>
  
  <entry>
    <title>GRPC初体验之Java简单实例</title>
    <link href="http://mistra.wang/2019/05/02/GRPC%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8BJava%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>http://mistra.wang/2019/05/02/GRPC初体验之Java简单实例/</id>
    <published>2019-05-02T07:11:47.000Z</published>
    <updated>2019-05-02T08:12:01.381Z</updated>
    
    <content type="html"><![CDATA[<p>关于RPC远程过程调用，分布式架构下不同服务之间调用越来越紧密，对调用效率，可靠性，可用性要求越来越高。RPC就是在此环境下应运而生的。需要结合服务注册中心一起使用。Eureka，Zookeeper，Consul，Etcd等等。</p><ul><li><strong>客户端，服务端，RPC之间的通讯</strong>:  一个服务自己可以是客户端同时也是服务端。最好采用TCP连接，传输层的TCP链接比应用层的HTTP链接更高效快速，远程过程调用的所有数据都在这个连接里传输。</li><li><strong>数据传输</strong>: 请求参数和响应数据都需要序列化成二进制数据在网络上传输，接收数据时反序列化。</li><li><p><strong>服务地址</strong>: 结合服务注册中心。请求某个服务我需要知道该服务的地址URL，端口号，方法名等等。Web服务协议栈的RPC，就要提供一个endpoint URI。<br>服务调用流程，借用别人一张图：<br><img src="https://img-blog.csdnimg.cn/20181127170832836.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1）服务消费方（client）调用以本地调用方式调用服务；<br>2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；<br>3）client stub找到服务地址，并将消息发送到服务端；<br>4）server stub收到消息后进行解码；<br>5）server stub根据解码结果调用本地的服务；<br>6）本地服务执行并将结果返回给server stub；<br>7）server stub将返回结果打包成消息并发送至消费方；<br>8）client stub接收到消息，并进行解码；<br>9）服务消费方得到最终结果。<br>RPC的目标就是要2~8这些步骤都封装起来。</p><p>参考文章：<br><a href="https://blog.csdn.net/u013521220/article/details/70157956" target="_blank" rel="noopener">https://blog.csdn.net/u013521220/article/details/70157956</a><br><a href="https://blog.csdn.net/KingCat666/article/details/78577079" target="_blank" rel="noopener">https://blog.csdn.net/KingCat666/article/details/78577079</a></p></li></ul><hr><h3 id="一、gRPC-Java-实例"><a href="#一、gRPC-Java-实例" class="headerlink" title="一、gRPC Java 实例"></a>一、gRPC Java 实例</h3><p>官方文档：<a href="http://doc.oschina.net/grpc?t=58008" target="_blank" rel="noopener">http://doc.oschina.net/grpc?t=58008</a><br>本实例GitHub地址：<a href="https://github.com/MistraR/grpc-java-mistra" target="_blank" rel="noopener">https://github.com/MistraR/grpc-java-mistra</a><br>gRPC 一开始由 google 开发，是一款语言中立、平台中立、开源的远程过程调用(RPC)系统。<br>本文写个gRPC的小栗子。<br>gRPC 默认使用 protocol buffers，这是 Google 开源的一套成熟的结构数据序列化机制（当然也可以使用其他数据格式如 JSON）。正如你将在下方例子里所看到的，你用 proto files 创建 gRPC 服务，用 protocol buffers 消息类型来定义方法参数和返回类型。本文使用“proto3”版本。<br>新建一个maven工程<br>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.grpc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mistra&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;grpc.version&gt;1.9.1&lt;/grpc.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.grpc&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;grpc-netty&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;grpc.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.grpc&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;grpc-protobuf&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;grpc.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.grpc&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;grpc-stub&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;grpc.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.protostuff&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.protostuff&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;extensions&gt;</span><br><span class="line">            &lt;extension&gt;</span><br><span class="line">                &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.5.0.Final&lt;/version&gt;</span><br><span class="line">            &lt;/extension&gt;</span><br><span class="line">        &lt;/extensions&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;0.5.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;protocArtifact&gt;com.google.protobuf:protoc:3.5.1-1:exe:$&#123;os.detected.classifier&#125;&lt;/protocArtifact&gt;</span><br><span class="line">                    &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;</span><br><span class="line">                    &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:1.11.0:exe:$&#123;os.detected.classifier&#125;&lt;/pluginArtifact&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">                            &lt;goal&gt;compile-custom&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>新建proto文件，注意包结构<br><img src="https://img-blog.csdnimg.cn/20181127170237246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>helloworld.proto<br>注意java_package的值最好跟你等会要拷贝这些生成类存放的目录一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option java_multiple_files = true;</span><br><span class="line">//生成java代码的package</span><br><span class="line">option java_package = &quot;com.grpc.mistra.generate&quot;;</span><br><span class="line">//创建的javaBean的文件名</span><br><span class="line">option java_outer_classname = &quot;MistraProto&quot;;</span><br><span class="line">// 可以生成rpc接口</span><br><span class="line">//option java_generic_services = true;</span><br><span class="line"></span><br><span class="line">package mistra;</span><br><span class="line"></span><br><span class="line">//声明一个服务名称</span><br><span class="line">service MistraService &#123;</span><br><span class="line">  //请求参数MistraRequest   响应参数MistraResponse</span><br><span class="line">  rpc SayHello (MistraRequest) returns (MistraResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//请求</span><br><span class="line">message MistraRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//响应</span><br><span class="line">message MistraResponse &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候就可以根据proto文件生成基本类了，maven install，然后就在target文件夹下看见生成的类：<br><img src="https://img-blog.csdnimg.cn/20181127170406122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把看到的这6个类都拷贝到主目录下。然后新建一个client类，新建一个server类。最后目录结构如下：<br><img src="https://img-blog.csdnimg.cn/20181127170528202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.grpc.mistra.client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.grpc.mistra.generate.MistraRequest;</span><br><span class="line">import com.grpc.mistra.generate.MistraResponse;</span><br><span class="line">import com.grpc.mistra.generate.MistraServiceGrpc;</span><br><span class="line">import io.grpc.ManagedChannel;</span><br><span class="line">import io.grpc.ManagedChannelBuilder;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: WangRui</span><br><span class="line"> * @Date: 2018/11/27</span><br><span class="line"> * Time: 14:46</span><br><span class="line"> * Description:</span><br><span class="line"> */</span><br><span class="line">public class MistraClient &#123;</span><br><span class="line"></span><br><span class="line">    private final ManagedChannel channel;</span><br><span class="line">    private final MistraServiceGrpc.MistraServiceBlockingStub blockingStub;</span><br><span class="line"></span><br><span class="line">    public MistraClient(String host, int port) &#123;</span><br><span class="line">        channel = ManagedChannelBuilder.forAddress(host, port)</span><br><span class="line">                .usePlaintext(true)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        blockingStub = MistraServiceGrpc.newBlockingStub(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void shutdown() throws InterruptedException &#123;</span><br><span class="line">        channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void greet(String name) &#123;</span><br><span class="line">        MistraRequest request = MistraRequest.newBuilder().setName(name).build();</span><br><span class="line">        MistraResponse response = blockingStub.sayHello(request);</span><br><span class="line">        System.out.println(response.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MistraClient client = new MistraClient(&quot;127.0.0.1&quot;, 8001);</span><br><span class="line">        System.out.println(&quot;-------------------客户端开始访问请求-------------------&quot;);</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            client.greet(&quot;你若想生存，绝处也能缝生: &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.grpc.mistra.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.grpc.mistra.generate.MistraRequest;</span><br><span class="line">import com.grpc.mistra.generate.MistraResponse;</span><br><span class="line">import com.grpc.mistra.generate.MistraServiceGrpc;</span><br><span class="line">import io.grpc.BindableService;</span><br><span class="line">import io.grpc.Server;</span><br><span class="line">import io.grpc.ServerBuilder;</span><br><span class="line">import io.grpc.stub.StreamObserver;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: WangRui</span><br><span class="line"> * @Date: 2018/11/27</span><br><span class="line"> * Time: 14:46</span><br><span class="line"> * Description:</span><br><span class="line"> */</span><br><span class="line">public class MistraServer &#123;</span><br><span class="line"></span><br><span class="line">    private int port = 8001;</span><br><span class="line">    private Server server;</span><br><span class="line"></span><br><span class="line">    private void start() throws IOException &#123;</span><br><span class="line">        server = ServerBuilder.forPort(port)</span><br><span class="line">                .addService((BindableService) new MistraHelloWorldImpl())</span><br><span class="line">                .build()</span><br><span class="line">                .start();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;------------------- 服务端服务已开启，等待客户端访问 -------------------&quot;);</span><br><span class="line"></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line"></span><br><span class="line">                System.err.println(&quot;*** shutting down gRPC server since JVM is shutting down&quot;);</span><br><span class="line">                MistraServer.this.stop();</span><br><span class="line">                System.err.println(&quot;*** server shut down&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void stop() &#123;</span><br><span class="line">        if (server != null) &#123;</span><br><span class="line">            server.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void blockUntilShutdown() throws InterruptedException &#123;</span><br><span class="line">        if (server != null) &#123;</span><br><span class="line">            server.awaitTermination();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, InterruptedException &#123;</span><br><span class="line">        final MistraServer server = new MistraServer();</span><br><span class="line">        //启动服务</span><br><span class="line">        server.start();</span><br><span class="line">        //服务一直在线，不关闭</span><br><span class="line">        server.blockUntilShutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个实现服务接口的类</span><br><span class="line">    private class MistraHelloWorldImpl extends MistraServiceGrpc.MistraServiceImplBase &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void sayHello(MistraRequest mistraRequest, StreamObserver&lt;MistraResponse&gt; responseObserver) &#123;</span><br><span class="line">            // 具体其他丰富的业务实现代码</span><br><span class="line">            System.err.println(&quot;server:&quot; + mistraRequest.getName());</span><br><span class="line">            MistraResponse reply = MistraResponse.newBuilder().setMessage((&quot;响应信息: &quot; + mistraRequest.getName())).build();</span><br><span class="line">            responseObserver.onNext(reply);</span><br><span class="line">            responseObserver.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行server的main方法，启动服务。<br>运行client端访问服务。<br><img src="https://img-blog.csdnimg.cn/20181127170805687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于RPC远程过程调用，分布式架构下不同服务之间调用越来越紧密，对调用效率，可靠性，可用性要求越来越高。RPC就是在此环境下应运而生的。需要结合服务注册中心一起使用。Eureka，Zookeeper，Consul，Etcd等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客
      
    
    </summary>
    
      <category term="RPC" scheme="http://mistra.wang/categories/RPC/"/>
    
    
      <category term="GRPC" scheme="http://mistra.wang/tags/GRPC/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Shiro实现用户登录认证和权限鉴定</title>
    <link href="http://mistra.wang/2019/05/02/SpringBoot%E6%95%B4%E5%90%88Shiro%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E5%92%8C%E6%9D%83%E9%99%90%E9%89%B4%E5%AE%9A/"/>
    <id>http://mistra.wang/2019/05/02/SpringBoot整合Shiro实现用户登录认证和权限鉴定/</id>
    <published>2019-05-02T07:06:43.000Z</published>
    <updated>2019-05-02T08:12:24.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Shiro"><a href="#一、Shiro" class="headerlink" title="一、Shiro"></a>一、Shiro</h3><p>Apache Shiro是一个Java安全框架,用来做身份验证(用户登录)、授权(权限控制)、密码和会话管理。常用的就是前两个模块。Shiro配置简单，使用起来无倾入性。比SpringSecurity更轻量级。<br>先对3个核心组件类有个印象，一定先理解这三个东西，对后面写代码和设计有帮助：</p><ul><li>Subject：可以把它看成<strong>当前请求访问系统的用户</strong>。会存储当前用户的信息，用户名密码等等。</li><li>SecurityManager：<strong>管理所有用户的安全操作</strong>。它是Shiro框架的核心，Shiro通过SecurityManager来<strong>管理内部各个组件</strong>实例，并通过它来提供安全管理的各种服务。权限验证等等。</li><li>Realm： 当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm(自己定义这个Realm)验证用户及其权限信息。</li></ul><hr><h3 id="二、设计方案"><a href="#二、设计方案" class="headerlink" title="二、设计方案"></a>二、设计方案</h3><p>本文只是介绍Shiro的基本使用和一般系统的登录，权限模块设计思路。</p><ul><li>system_user(id、username、password、role_id&lt;system_role.id&gt;)：用户表</li><li>system_role(id、role_name)：角色表</li><li>system_resources(id、resources_name、resources_url、permission_code)：系统资源表，resources_url就是该资源的请求路径，譬如一个接口请求路径，permission_code是使用Shiro的权限控制注解是需要用到的code，后面会看到。此表有条数据【1，用户列表，/user/getList，permis[get]】后面会用到！！！！</li><li>role_resources(id、role_id&lt;system_role.id&gt;、resources_id&lt;system_resources.id&gt;)：角色资源关联表<br>大致表结构如上，很清晰易懂。<br>系统每个用户对应一个角色(本文就设计为一个用户只有一个角色，当然，你也可以设计多个角色的情况)。<br><strong>传统的权限控制手段可能就是：用户登录–&gt;查询数据库用户名和密码是否匹配–&gt;匹配的话根据当前用户的role_id在角色资源关联表查询到该角色拥有的资源id集合–&gt;关联系统资源表–&gt;再去判断该用户是否有此资源的权限。Shiro可以包揽整个过程。</strong></li></ul><hr><h3 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h3><p>一步一步看着来，不要着急。慢慢理解，我应该写的很详细了，不难懂。(这里只列核心代码)<br>pom.xml  Shiro依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>本文只做两个事，把用户登录的验证和用户是否拥有某个接口的请求权限交给Shiro来处理。</p><h4 id="1、先解决用户登录问题"><a href="#1、先解决用户登录问题" class="headerlink" title="1、先解决用户登录问题"></a>1、先解决用户登录问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//省略了其他的常规代码，比如判断字段是否为空之类的</span></span><br><span class="line"><span class="comment">//此Subject就是开头提到的  代表当前用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//用请求的用户名和密码创建UsernamePasswordToken(此类来自shiro包下)</span></span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">    <span class="comment">//调用subject.login进行验证，验证不通过则会抛出AuthenticationException异常，然后自定义返回信息</span></span><br><span class="line">    subject.login(usernamePasswordToken);</span><br><span class="line">    <span class="comment">//未抛异常 则验证通过</span></span><br><span class="line">    <span class="comment">//此Session也来自shiro包  是对传统的HttpSession的封装，可以看做是一样的</span></span><br><span class="line">    Session session = subject.getSession();</span><br><span class="line">    <span class="comment">//下面的是自定义的代码，随你怎么写</span></span><br><span class="line">    session.setAttribute(RequestConstans.USER_ID, checkUser.getId());</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line"><span class="comment">//这行也是自定义的代码，随你怎么写</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(BusinessErrorCode.USER_LOGIN_PWD_ERROR_FAIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是截取的登录接口的一部分代码，这就是登录接口方法的处理了，很简单，通过subject.login(usernamePasswordToken);方法，就把登录验证交给Shiro来处理了。省略了原来自己去判断用户名跟密码是否匹配的过程。<br>扩展：<a href="https://www.cnblogs.com/OnlyCT/p/8391274.html" target="_blank" rel="noopener">hiro session和Spring session一样吗？</a></p><h4 id="2、自定义的Realm，用来处理登录验证与鉴权"><a href="#2、自定义的Realm，用来处理登录验证与鉴权" class="headerlink" title="2、自定义的Realm，用来处理登录验证与鉴权"></a>2、自定义的Realm，用来处理登录验证与鉴权</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mechat.backend.dao.CommercialMapper;</span><br><span class="line"><span class="keyword">import</span> com.mechat.backend.dao.SystemMenuMapper;</span><br><span class="line"><span class="keyword">import</span> com.mechat.backend.model.Commercial;</span><br><span class="line"><span class="keyword">import</span> com.mechat.backend.model.SystemMenu;</span><br><span class="line"><span class="keyword">import</span> com.mechat.backend.utils.UserConfig;</span><br><span class="line"><span class="keyword">import</span> com.mechat.common.auth.AESUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: WangRui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/1/22</span></span><br><span class="line"><span class="comment"> * Time: 22:43</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemMenuMapper systemMenuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录认证方法</span></span><br><span class="line"><span class="comment">     * 上面不是调用了subject.login()方法嘛，就会进入到这个方法来进行具体登录验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="comment">//authenticationToken.getPrincipal()是获得用户名</span></span><br><span class="line">        <span class="keyword">if</span> (authenticationToken.getPrincipal() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"账号名为空，登录失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        String name = authenticationToken.getPrincipal().toString();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        <span class="comment">//通过用户名在数据库查到该用户的信息</span></span><br><span class="line">        user = userMapper.selectByPKey(user);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这里返回后会报出对应异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"不存在的账号，登录失败！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//这里验证authenticationToken和simpleAuthenticationInfo的信息</span></span><br><span class="line">            <span class="comment">//getName()  是Shiro包下org.apache.shiro.realm.CachingRealm的方法，不是自定义的</span></span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(name, user.getPassword, getName());</span><br><span class="line">            <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户鉴权</span></span><br><span class="line"><span class="comment">     * 用户请求有权限要求的接口时要经过此认证，</span></span><br><span class="line"><span class="comment">     * 譬如我在某个Controller的方法上加了注解<span class="doctag">@RequiresPermissions</span>(value = "permis[get]")，</span></span><br><span class="line"><span class="comment">     * 那么该用户的角色拥有的资源必须要包含“permis[get]”权限才能访问此接口，</span></span><br><span class="line"><span class="comment">     * “permis[get]”对应文章开头说的表结构那里的系统资源表中的permission_code</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取登录用户名，此用户名是在登录接口里new UsernamePasswordToken()时设置的</span></span><br><span class="line">        String account = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//添加角色和权限</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//根据用户账号查询拥有的所有资源权限  SystemMenu对应表system_resources，这是一条关联sql，</span></span><br><span class="line">        <span class="comment">//通过用户账号-拿到角色id-在role_resources查询到拥有的resources_id-然后关联system_resources查询到拥有的所有资源</span></span><br><span class="line">        List&lt;SystemMenu&gt; systemMenuList = systemMenuMapper.findUserPermission(account);</span><br><span class="line">        <span class="comment">//添加角色   因为此次只关联到权限permission，故暂不添加角色，只通过permission来鉴权</span></span><br><span class="line">        <span class="comment">//添加角色对应的使用注解是 @RequiresRoles()</span></span><br><span class="line">        <span class="comment">//simpleAuthorizationInfo.save("admin");</span></span><br><span class="line">        <span class="comment">//添加权限  在这里就把该用户对应的角色拥有的所有的权限的permission_code添加到Shiro了，每次访问带有权限限制的接口时就会验证，拥有对应权限code的话就可以正常访问。</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(systemMenuList.stream().map(systemMenu -&gt; systemMenu.getPermission()).collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解使用图解：<br><img src="https://img-blog.csdnimg.cn/20190122225655661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意@RequiresPermissions(value = “permis[get]”) value的值就是对应资源的permission_code，见开头表结构设计那里！！！换句话说，此用户必须要有此资源权限才能访问这个Controller方法。</p><h4 id="3、securityManager安全配置"><a href="#3、securityManager安全配置" class="headerlink" title="3、securityManager安全配置"></a>3、securityManager安全配置</h4><p>自定义的MyShiroRealm写好了，要配置他才能使用。下面就是Shiro的配置类了：<br>定义了一个Properties，需要忽略验证的请求路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IgnoreAuthUrlProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; ignoreAuthUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getIgnoreAuthUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ignoreAuthUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIgnoreAuthUrl</span><span class="params">(List&lt;String&gt; ignoreAuthUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ignoreAuthUrl = ignoreAuthUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的配置：<br><img src="https://img-blog.csdnimg.cn/20190122230725850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.ehcache.EhCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.SessionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.SessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: WangRui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/1/22</span></span><br><span class="line"><span class="comment"> * Time: 22:44</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IgnoreAuthUrlProperties ignoreAuthUrlProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">myShiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyShiroRealm myShiroRealm = <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">        <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EnterpriseCacheSessionDAO();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">(SessionDAO sessionDAO)</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager manager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        manager.setSessionDAO(sessionDAO);</span><br><span class="line">        <span class="comment">//设置session过期时间</span></span><br><span class="line">        manager.setGlobalSessionTimeout(<span class="number">3600000</span>);</span><br><span class="line">        manager.setSessionValidationInterval(<span class="number">3600000</span>);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限管理，配置主要是Realm的管理认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(CacheManager cacheManager, SessionManager sessionManager)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        securityManager.setCacheManager(cacheManager);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Filter工厂，设置对应的过滤条件和跳转条件  这是重点！！！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        Set&lt;String&gt; urlSet = <span class="keyword">new</span> HashSet&lt;&gt;(ignoreAuthUrlProperties.getIgnoreAuthUrl());</span><br><span class="line">        <span class="comment">//必须采用LinkedHashMap有序存储过滤条件 </span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//anon表示所有用户都可以不鉴权匿名访问</span></span><br><span class="line">        urlSet.stream().forEach(temp -&gt; map.put(temp, <span class="string">"anon"</span>));</span><br><span class="line">        <span class="comment">//此路径必须放在最后  这是为啥一定使用LinkedHashMap的原因</span></span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        <span class="comment">//首页</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入shiro注解的使用，不加入这个注解不生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至次，Shiro的登录验证和鉴权算是开发完成了。只是简单实用，Shiro还有其他很强大的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Shiro&quot;&gt;&lt;a href=&quot;#一、Shiro&quot; class=&quot;headerlink&quot; title=&quot;一、Shiro&quot;&gt;&lt;/a&gt;一、Shiro&lt;/h3&gt;&lt;p&gt;Apache Shiro是一个Java安全框架,用来做身份验证(用户登录)、授权(权限控制)、密码和
      
    
    </summary>
    
      <category term="Shiro" scheme="http://mistra.wang/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="http://mistra.wang/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>JsonWebToken(JWT)设计方案</title>
    <link href="http://mistra.wang/2019/04/30/JsonWebToken(JWT)%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/"/>
    <id>http://mistra.wang/2019/04/30/JsonWebToken(JWT)设计方案/</id>
    <published>2019-04-30T01:06:59.000Z</published>
    <updated>2019-05-02T08:12:24.527Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Json-web-tokens-：官网"><a href="#Json-web-tokens-：官网" class="headerlink" title="Json web tokens ：官网"></a>Json web tokens ：<a href="https://jwt.io/" target="_blank" rel="noopener">官网</a></h4><hr><h3 id="What-JsonWebToken是什么"><a href="#What-JsonWebToken是什么" class="headerlink" title="What? - JsonWebToken是什么"></a>What? - JsonWebToken是什么</h3><p>请求访问后台，后台需要知道你是谁吧？Token就是一个令牌，每次请求后台都带上它，说明你是谁，并且可以携带一些你的信息。Token是后台根据你配置的算法，还有密钥，编码生成的，最后在通过base64加密返给请求。<br>它长这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>注意到两个”.”分隔符了嘛，Token分成3部分，上面是base64加密的，解密一下：<br><img src="https://img-blog.csdnimg.cn/20190424095904517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt><br>第一部分，说明了用的什么加密算法<br>第二部分，是我们手动放进去的部分信息，譬如放用户id什么的，注意不能放私密信息，因为这部分是可以解密的<br>第三部分，会发现解密不了，因为我们不知道后台用的什么密钥，so，别人是没法伪造token来访问你的(token也有缺陷，后面会提到)</p><hr><h3 id="Why-为什么要用Token"><a href="#Why-为什么要用Token" class="headerlink" title="Why? - 为什么要用Token"></a>Why? - 为什么要用Token</h3><p>都知道session，Token的出现解决了使用session来存储用户身份信息的一些弊端，两个可以根据实际情况觉得用哪种。<br>参考：<a href="https://www.cnblogs.com/xiaozhang2014/p/7750200.html" target="_blank" rel="noopener">Session,Token相关区别</a></p><hr><h3 id="How-用户身份认证完整设计方案"><a href="#How-用户身份认证完整设计方案" class="headerlink" title="How? - 用户身份认证完整设计方案"></a>How? - 用户身份认证完整设计方案</h3><p>Token必须有过期时间，不然登录的时候生成一次，后面的请求拿着一直访问也不合理，泄露了Token的话不安全。<br><em>(本文只节选部分代码，着重说下设计方案，Token的代码实现网上很多)</em><br>先看下Token怎么生成的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 把userId，versionCode编码到token负载中，同时把刷新token操作的过期时间也编码到负载中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String userId, Integer versionCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        Date expire = Date.from(LocalDateTime.now().plusSeconds(jsonWebTokenProperties.getAccessTokenExpireTime()).atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">        <span class="comment">//刷新时间</span></span><br><span class="line">        Date refresh = Date.from(LocalDateTime.now().plusSeconds(jsonWebTokenProperties.getRefreshTokenExpireTime()).atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(JsonWebTokenConstant.TOKEN_USER_ID_FLAG, userId)</span><br><span class="line">                .withClaim(JsonWebTokenConstant.REFRESH_TOKEN_FLAG, refresh)</span><br><span class="line">                .withClaim(JsonWebTokenConstant.TOKEN_VERSION_ID_FLAG, versionCode)</span><br><span class="line">                .withIssuer(JsonWebTokenConstant.ISSUER)</span><br><span class="line">                .withExpiresAt(expire)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>jsonWebTokenProperties和JsonWebTokenConstant是自定义的枚举或properties。<br><strong>方案：<br>1、给Token设计一个过期时间和刷新时间</strong></p><ul><li>过期时间：通过自带的withExpiresAt()方法设置，请求携带token访问，验证token的时候当前时间已经超过了这个过期时间，那么验证就不会通过，会直接报错，这个时候就该提示用户去登录。</li><li>刷新时间：刷新时间只能放在token的荷载里面了，验证token的时候，当前时间已经超过了这个刷新时间，但是又不超过过期时间，这个时候就应该重新生成一个token，这个新token就会有新的过期时间，刷新时间，放在响应头返回给用户，前端拿到新token就替换掉原来的token。这样就可以实现用户的无衔接访问。(这个地方也会有个并发问题，后面会说到)。如果不设计刷新时间，只有过期时间，假如15天过期，这15天内用户都在访问，但是15天过去了，啪，验证不通过，让用户去登录，这样用户体验不好，我们就在用户不知情的情况下刷新了它的Token。假如用户15天都没有访问过，验证不通过，提示去登陆，这个很正常。</li></ul><p><strong>2、Token的荷载</strong><br>可以通过withClaim()方法在token里面放入你需要的信息。我这里放入了刷新时间，userId，还有一个<strong>versionCode</strong>。<br>验证token的时候可以这样拿到你放进去的信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">   Map&lt;String, Claim&gt; claimMap = decodedJWT.getClaims();</span><br><span class="line">   Date refresh = claimMap.get(JsonWebTokenConstant.REFRESH_TOKEN_FLAG).asDate();</span><br></pre></td></tr></table></figure></p><p><strong>3、Token的版本-关键点！！！</strong><br>这里设计的版本就是荷载里面的 <strong>versionCode</strong>。<br>这个版本号用来做什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">versionCode设计的默认值是：2147500033 </span><br><span class="line">把它转换成二进制看看：1000 00000000000001 00000000000001(32位)</span><br><span class="line">从左往右看，左边的14位：00000000000001 用来存放token版本号，每生成一次token就+1，说明每次刷新token的时候生成token，每次登录的时候生成token这个版本都要+1</span><br><span class="line">再看，中间的14位：00000000000001  用来存放登录版本号，每登录一次才+1</span><br><span class="line">最后剩下高位的4位：1000 暂时冗余出来的</span><br></pre></td></tr></table></figure><p>每次登录的时候很简单，从数据库取该用户的versionCode(数据库存的Integer类型)，先把versionCode转换成二进制，然后截取出登录版本，token版本分别+1，然后再拼接成二进制字符串，再转换成Integer，放在Token荷载，更新数据库。</p><h4 id="每次验证token的时候，如果是需要刷新token的情况，都需要验证版本号，为了防止Token泄露恶意访问"><a href="#每次验证token的时候，如果是需要刷新token的情况，都需要验证版本号，为了防止Token泄露恶意访问" class="headerlink" title="每次验证token的时候，如果是需要刷新token的情况，都需要验证版本号，为了防止Token泄露恶意访问"></a>每次验证token的时候，如果是需要刷新token的情况，都需要验证版本号，为了防止Token泄露恶意访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拿Token携带的versionCode与数据库的versionCode比较</span><br><span class="line">若登录版本不一致，或Token版本不一致，都提示去登录</span><br><span class="line">若两个版本都一致，才继续执行刷新token的逻辑</span><br></pre></td></tr></table></figure><p>这里会有个并发问题，App有时候请求是好几个一起到达的，这些请求都携带的同样的token。有可能第一个请求更新了数据的versionCode，那么之后的请求进来验证的时候就会验证不通过，因为验证token是放在拦截器里面的，几乎所有请求都要走这里，加锁不现实。<br>这里这样解决的：刷新token的时候如果生成了token，redis里面也会缓存30秒这个token，数据库增加了一个最后刷新token时间字段，验证token的时候若在这个30秒内，说明30秒内有请求刷新过token，并且携带了新token返回。直接略过验证。(这里会有点绕，慢慢掰才行)，上部分代码：</p><h5 id="BasedInterceptor-preHandle-节选："><a href="#BasedInterceptor-preHandle-节选：" class="headerlink" title="BasedInterceptor preHandle()节选："></a>BasedInterceptor preHandle()节选：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//验证Token</span></span><br><span class="line">    JsonWebTokenVerifyStatus jsonWebTokenVerifyStatus = jsonWebTokenUtils.verification(request);</span><br><span class="line">    <span class="keyword">if</span> (jsonWebTokenVerifyStatus.equals(JsonWebTokenVerifyStatus.LOGIN)) &#123;</span><br><span class="line">        logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,JsonWebTokenVerifyStatus.LOGIN"</span>, headerUserId);</span><br><span class="line">        <span class="comment">//登陆过期或登录异常，需要重新登录!</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(BusinessErrorCode.LOGIN_EXPIRE);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jsonWebTokenVerifyStatus.equals(JsonWebTokenVerifyStatus.LOGIN_OTHER)) &#123;</span><br><span class="line">        logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,JsonWebTokenVerifyStatus.LOGIN_OTHER"</span>, headerUserId);</span><br><span class="line">        <span class="comment">//该账号在别的设备登录！  提示信息</span></span><br><span class="line">        String message = userBaseGrpcService.getLoginRecord(headerUserId, jsonWebTokenUtils.getVersionCodeFromHttpServletRequest(request).toString(), request.getIntHeader(RequestConstans.CLIENT_OS), <span class="number">2</span>).getData().toString();</span><br><span class="line">        <span class="keyword">this</span>.loginOtherMessagePrompt(BusinessErrorCode.LOGIN_OTHER, response, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jsonWebTokenVerifyStatus.equals(JsonWebTokenVerifyStatus.SUCCESS)) &#123;</span><br><span class="line">        <span class="comment">//验证成功放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jsonWebTokenVerifyStatus.equals(JsonWebTokenVerifyStatus.CREATE_NEW)) &#123;</span><br><span class="line">        String userId = CurrentUserSession.getUserId().toString();</span><br><span class="line">        <span class="comment">//需要刷新token</span></span><br><span class="line">        String existToken = jedisCommands.get(userId + JsonWebTokenConstant.REDIS_TOKEN_SUFFIX);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(existToken)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,JsonWebTokenVerifyStatus.CREATE_NEW"</span>, headerUserId);</span><br><span class="line">            <span class="comment">//如果redis已存在最近刚刚刷新生成的token</span></span><br><span class="line">            response.setHeader(JsonWebTokenConstant.RESPONSE_HEADER_USER_TOKEN_FLAG, existToken);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//需要重新生成token 继续请求数据  把新token放在header</span></span><br><span class="line">            logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,JsonWebTokenVerifyStatus.CREATE_NEW,refreshGenerateTokenByRequestCode()"</span>, headerUserId);</span><br><span class="line">            String allNewToken = jsonWebTokenUtils.refreshGenerateTokenByRequestCode(userId, request);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(allNewToken)) &#123;</span><br><span class="line">                response.setHeader(JsonWebTokenConstant.RESPONSE_HEADER_USER_TOKEN_FLAG, allNewToken);</span><br><span class="line">                jedisCommands.setex(userId + JsonWebTokenConstant.REDIS_TOKEN_SUFFIX, JsonWebTokenConstant.REDIS_TOKEN_EXPIRE, allNewToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是jsonWebTokenUtils.verification(request).getCode()方法</p><h4 id="JsonWebTokenUtils节选"><a href="#JsonWebTokenUtils节选" class="headerlink" title="JsonWebTokenUtils节选"></a>JsonWebTokenUtils节选</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证token，返回状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> JsonWebTokenVerifyStatus</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonWebTokenVerifyStatus <span class="title">verification</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String token = <span class="keyword">this</span>.getToken(request);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">        logger.info(<span class="string">"Token is empty！To login！"</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonWebTokenVerifyStatus.LOGIN;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"uid:&#123;&#125;,token:&#123;&#125;"</span>, request.getHeader(RequestConstans.USER_ID), token);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">        Map&lt;String, Claim&gt; claimMap = decodedJWT.getClaims();</span><br><span class="line">        Date refresh = claimMap.get(JsonWebTokenConstant.REFRESH_TOKEN_FLAG).asDate();</span><br><span class="line">        String userId = claimMap.get(JsonWebTokenConstant.TOKEN_USER_ID_FLAG).asString();</span><br><span class="line">        <span class="comment">//保存当前userId</span></span><br><span class="line">        CurrentUserSession.setUserId(Long.valueOf(userId));</span><br><span class="line">        <span class="keyword">if</span> (!userId.equals(request.getHeader(RequestConstans.USER_ID))) &#123;</span><br><span class="line">            <span class="comment">//验证token中的uid是否与header中的uid一致</span></span><br><span class="line">            logger.error(<span class="string">"header in uid and user_token in uid differ error &#123;&#125; "</span>, userId);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(BusinessErrorCode.VOICE_CALL_PARAM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (refresh.getTime() &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">//刷新 token</span></span><br><span class="line">            Integer versionCode = claimMap.get(JsonWebTokenConstant.TOKEN_VERSION_ID_FLAG).asInt();</span><br><span class="line">            <span class="keyword">if</span> (versionCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//兼容老token</span></span><br><span class="line">                <span class="keyword">return</span> JsonWebTokenVerifyStatus.CREATE_NEW;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//验证token中的版本号是否与数据库中的是否一致，不一致的话转登录</span></span><br><span class="line">            LoginTokenVersionCompareEnum result = <span class="keyword">this</span>.checkVersion(versionCode, request, Long.valueOf(userId));</span><br><span class="line">             <span class="keyword">if</span> (result.equals(LoginTokenVersionCompareEnum.TOKEN_DIFFERENCE)) &#123;</span><br><span class="line">                <span class="comment">//tokenVersion版本不一致，提示去登录</span></span><br><span class="line">                <span class="keyword">return</span> JsonWebTokenVerifyStatus.LOGIN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.equals(LoginTokenVersionCompareEnum.IN_CONSISTENT)) &#123;</span><br><span class="line">                <span class="comment">//loginVersion和tokenVersion不一致，在别处登录过</span></span><br><span class="line">                <span class="keyword">return</span> JsonWebTokenVerifyStatus.LOGIN_OTHER;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.equals(LoginTokenVersionCompareEnum.LATEST_REFRESH)) &#123;</span><br><span class="line">                <span class="comment">//近期(30秒内)刷新过token，</span></span><br><span class="line">                <span class="keyword">return</span> JsonWebTokenVerifyStatus.SUCCESS;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//loginVersion和tokenVersion都一致，刷新token</span></span><br><span class="line">                logger.info(JsonWebTokenVerifyStatus.CREATE_NEW.getMessage());</span><br><span class="line">                <span class="keyword">return</span> JsonWebTokenVerifyStatus.CREATE_NEW;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonWebTokenVerifyStatus.SUCCESS;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BusinessException b) &#123;</span><br><span class="line">        <span class="keyword">throw</span> b;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JWTVerificationException JWTVerificationException) &#123;</span><br><span class="line">   <span class="comment">//token验证失败，token过期或者是假token</span></span><br><span class="line">        logger.info(JsonWebTokenVerifyStatus.LOGIN.getMessage());</span><br><span class="line">        <span class="keyword">return</span> JsonWebTokenVerifyStatus.LOGIN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是this.checkVersion(versionCode, request, Long.valueOf(userId)).getCode();方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验版本号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestVersionCode 请求token里携带的版本号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request            request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId             userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LoginTokenVersionCompareEnum <span class="title">checkVersion</span><span class="params">(Integer requestVersionCode, HttpServletRequest request, Long userId)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd  HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">int</span> loginAndTokenLength = jsonWebTokenProperties.getLoginTokenVersionCodeTokenLength();</span><br><span class="line">    ImUserBase imUserBase = imUserBaseMapper.selectByPrimaryKey(userId);</span><br><span class="line">    PlatformEnum platformEnum = <span class="keyword">this</span>.getPlatformFromRequest(request);</span><br><span class="line">    Date date;</span><br><span class="line">    Integer dbVersionCode;</span><br><span class="line">    <span class="keyword">if</span> (platformEnum.equals(PlatformEnum.ANDROID) || platformEnum.equals(PlatformEnum.IOS)) &#123;</span><br><span class="line">        dbVersionCode = imUserBase.getAppTokenVersion();</span><br><span class="line">        date = imUserBase.getAppTokenRefreshTime();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dbVersionCode = imUserBase.getWebTokenVersion();</span><br><span class="line">        date = imUserBase.getWebTokenRefreshTime();</span><br><span class="line">    &#125;</span><br><span class="line">    String requestVersionCodeBinary = BitUtils.decimalToBinary(requestVersionCode);</span><br><span class="line">    String dbVersionCodeBinary = BitUtils.decimalToBinary(dbVersionCode);</span><br><span class="line">    Boolean tokenCompareResult = requestVersionCodeBinary.substring(requestVersionCodeBinary.length() - loginAndTokenLength)</span><br><span class="line">            .equals(dbVersionCodeBinary.substring(dbVersionCodeBinary.length() - loginAndTokenLength));</span><br><span class="line">    Boolean loginCompareResult = requestVersionCodeBinary.substring(requestVersionCodeBinary.length() - <span class="number">2</span> * loginAndTokenLength, requestVersionCodeBinary.length() - loginAndTokenLength)</span><br><span class="line">            .equals(dbVersionCodeBinary.substring(dbVersionCodeBinary.length() - <span class="number">2</span> * loginAndTokenLength, dbVersionCodeBinary.length() - loginAndTokenLength));</span><br><span class="line">    <span class="comment">//token版本仅相差1的情况  说明近期有请求刷新过token</span></span><br><span class="line">    Integer addResultCode = <span class="keyword">this</span>.increaseVersion(requestVersionCode, JsonWebTokenConstant.TOKEN_VERSION_TAG);</span><br><span class="line">    logger.debug(<span class="string">"requestVersionCode:&#123;&#125;,addResultCode:&#123;&#125;,dbVersionCode:&#123;&#125;"</span>, requestVersionCode, addResultCode, dbVersionCode);</span><br><span class="line">    <span class="keyword">boolean</span> tokenVersionDifferOne = addResultCode.equals(dbVersionCode);</span><br><span class="line">    Long intervalTime = System.currentTimeMillis() - date.getTime();</span><br><span class="line">    logger.debug(<span class="string">"loginCompareResult:&#123;&#125;,tokenCompareResult:&#123;&#125;,tokenVersionDifferOne:&#123;&#125;,intervalTime:&#123;&#125;,latestRefresh:&#123;&#125;,SystemTime:&#123;&#125;,dbTime:&#123;&#125;"</span>,</span><br><span class="line">            loginCompareResult, tokenCompareResult, tokenVersionDifferOne, intervalTime, intervalTime &lt;= JsonWebTokenConstant.LATEST_REFRESH_TIME, simpleDateFormat.format(<span class="keyword">new</span> Date()), simpleDateFormat.format(date));</span><br><span class="line">    <span class="keyword">if</span> (loginCompareResult &amp;&amp; tokenCompareResult) &#123;</span><br><span class="line">        logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,LoginTokenVersionCompareEnum.CONSISTENT"</span>, userId);</span><br><span class="line">        <span class="comment">//都一致</span></span><br><span class="line">        <span class="keyword">return</span> LoginTokenVersionCompareEnum.CONSISTENT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (loginCompareResult &amp;&amp; tokenVersionDifferOne &amp;&amp; intervalTime &lt;= JsonWebTokenConstant.LATEST_REFRESH_TIME) &#123;</span><br><span class="line">        logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,LoginTokenVersionCompareEnum.LATEST_REFRESH"</span>, userId);</span><br><span class="line">        <span class="comment">//版本相差1且同时期有请求刷新过token  30秒内</span></span><br><span class="line">        <span class="keyword">return</span> LoginTokenVersionCompareEnum.LATEST_REFRESH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (loginCompareResult) &#123;</span><br><span class="line">        logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,LoginTokenVersionCompareEnum.TOKEN_DIFFERENCE"</span>, userId);</span><br><span class="line">        <span class="comment">//login版本一致，token版本不一致，提示去登录</span></span><br><span class="line">        <span class="keyword">return</span> LoginTokenVersionCompareEnum.TOKEN_DIFFERENCE;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"uid:&#123;&#125;--------------------------------------------,LoginTokenVersionCompareEnum.IN_CONSISTENT"</span>, userId);</span><br><span class="line">    <span class="comment">//都不一致，说明该账号在其他设备登录过，提示去登录</span></span><br><span class="line">    <span class="keyword">return</span> LoginTokenVersionCompareEnum.IN_CONSISTENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只节选了部分代码，设计方案仅供参考，不同业务场景设计不一样。</p><hr><p><img src="https://img-blog.csdnimg.cn/20190424112857959.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F4ZWxhMzBX,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Json-web-tokens-：官网&quot;&gt;&lt;a href=&quot;#Json-web-tokens-：官网&quot; class=&quot;headerlink&quot; title=&quot;Json web tokens ：官网&quot;&gt;&lt;/a&gt;Json web tokens ：&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="设计方案" scheme="http://mistra.wang/categories/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="JsonWebToken" scheme="http://mistra.wang/tags/JsonWebToken/"/>
    
  </entry>
  
</feed>
